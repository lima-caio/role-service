import groovy.time.TimeCategory

def testResult = { name, desc, result ->
    if (!desc.parent) {
        def startItem = '|  ', endItem = '  |'

        def duration = TimeCategory.minus new Date(result.endTime), new Date(result.startTime)
        def output = "${name} tests result: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} success, " +
            "${result.failedTestCount} failure, ${result.skippedTestCount} skipped); Completed at: ${duration}"
        def repeatLength = startItem.length() + output.length() + endItem.length()

        println "\n${'-' * repeatLength}\n${startItem}${output}${endItem}\n${'-' * repeatLength}"
    }
}

ext {
    setupCommonPropetiesForTest = { context, name ->
        context.with {
            systemProperties = System.properties
            systemProperties['user.dir'] = workingDir

            testLogging.showStandardStreams = project.hasProperty('consoleTraceTests')

            afterTest { descriptor, result ->
                logger.lifecycle("${name} test ${result.resultType}: [${descriptor.className}] -> ${descriptor.name}()")
            }

            afterSuite testResult.curry(name)
        }
    }
}
